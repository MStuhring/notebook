# initialize a git repository
# create a .git folder in the current working directory
git init

# take a look at the staging area
# files can be
    - untracked
    - tracked
    - committed (not in the staging area anymore)
git status

# adds changes in a file to the staging area
git add <file>

# take a look at the commits area
git log

# like git log but less verbose
git ll

# commits the changes in the staging area to the commits area and cleans out the staging area (prepares it for the next commit)
git commit -m 'message'

# A commit contains
    - unique ID
    - changes
    - message
    - timestamp
    - author

# Creates a special file that acts as the bouncer to the staging area.  The path will be ignored.
touch .gitignore

# Remove file
git rm <file>

# Take file out of the staging area (Unstage a file)
git rm --cached <file>

# Rename a file
git mv <old file> <new file>

# add a remote called origin (key) that refers to a URL (value)
# allows me to push (and pull) commits to and from the remote
git remote add origin URL

# push the current branch (master) to a branch (also master) on the origin remote
# the first master refers to the local branch
# the second master refers to the remote branch
# the -u flag sets the upstream (connects the two branches)
~/P/w/notebook master ✔ git push -u origin master

# once the local master branch is connected to a remote branch,
  I don't need to specify the remote or branch names
~/P/w/notebook master ✔ git push

# also shows the history of the local and remote branches
git ll

# git status shortcut
git st
